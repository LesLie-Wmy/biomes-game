"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[317],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||s;return t?r.createElement(h,o(o({ref:n},p),{},{components:t})):r.createElement(h,o({ref:n},p))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8211:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const s={sidebar_position:2},o="Example Usage",i={unversionedId:"resources/example_usage",id:"resources/example_usage",title:"Example Usage",description:"Defining resource paths",source:"@site/docs/resources/example_usage.md",sourceDirName:"resources",slug:"/resources/example_usage",permalink:"/docs/resources/example_usage",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/resources/overview"}},l={},c=[{value:"Defining resource paths",id:"defining-resource-paths",level:3},{value:"Defining components",id:"defining-components",level:3},{value:"Building resources",id:"building-resources",level:3},{value:"Accessing resources",id:"accessing-resources",level:3},{value:"Updating resources",id:"updating-resources",level:3},{value:"Using resources within React",id:"using-resources-within-react",level:3}],p={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"example-usage"},"Example Usage"),(0,a.kt)("h3",{id:"defining-resource-paths"},"Defining resource paths"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'interface Health {\n  health: number;\n  maxHealth: number;\n}\n\ninterface PlayerResource {\n  health: Health;\n  position: Vec3;\n}\n\ninterface ExampleResourcePaths {\n  // Players are looked up by their BiomesId.\n  "/player": PathDef<[BiomesId], PlayerResource>;\n  "/player/health": PathDef<[BiomesId], Health>;\n  "/player/position": PathDef<[BiomesId], { position: Vec3 }>;\n  // The clock has no parameters.\n  "/clock": PathDef<[], { time: number }>;\n}\n')),(0,a.kt)("h3",{id:"defining-components"},"Defining components"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type ExampleResourcesBuilder = BiomesResourcesBuilder<ExampleResourcePaths>;\ntype ExampleResourceDeps = TypedResourceDeps<ExampleResourcePaths>;\ntype ExampleResources = TypedResources<ExampleResourcePaths>;\ntype ExampleReactResources = ReactResources<ExampleResourcePaths>;\n")),(0,a.kt)("h3",{id:"building-resources"},"Building resources"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'function genPlayerResource(deps: ExampleResourceDeps, id: BiomesId) {\n  // Calling deps.get() here creates a dependency between\n  // "/player" and "/player/health" + "/player/position".\n  // Whenever the dependencies update, this generator function will rerun.\n  const health = deps.get("/player/health", id);\n  const { position } = deps.get("/player/position", id);\n\n  return {\n    health,\n    position,\n  };\n}\n\nfunction addExampleResources(builder: ExampleResourcesBuilder) {\n  // Define a global resource.\n  builder.addGlobal("/clock", { time: secondsSinceEpoch() });\n  builder.add("/player", genPlayerResource);\n  builder.add("/player/health", { health: 100, maxHealth: 100 });\n  builder.add("/player/position", { position: [0, 0, 0] });\n}\n')),(0,a.kt)("h3",{id:"accessing-resources"},"Accessing resources"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("em",{parentName:"p"},"Note: The same can be done using ",(0,a.kt)("inlineCode",{parentName:"em"},"ExampleReactResources")),".")),(0,a.kt)("p",null,"Resources are accessed using the ",(0,a.kt)("inlineCode",{parentName:"p"},"get()")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'function healthBarColor(resources: ExampleResources, id: BiomesId): string {\n  const { health, maxHealth } = resources.get("/player/health", id);\n  const healthPercentage = Math.round((health / maxHealth) * 100);\n  if (healthPercentage >= 80) {\n    return "GREEN";\n  } else if (healthPercentage >= 50) {\n    return "YELLOW";\n  } else if (healthPercentage > 0) {\n    return "RED";\n  } else {\n    return "BLACK";\n  }\n}\n')),(0,a.kt)("h3",{id:"updating-resources"},"Updating resources"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("em",{parentName:"p"},"Note: The same can be done using ",(0,a.kt)("inlineCode",{parentName:"em"},"ExampleReactResources")),".")),(0,a.kt)("p",null,"Resources are updated using the ",(0,a.kt)("inlineCode",{parentName:"p"},"set()")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const JUMP_POWER = 10;\n\nfunction jump(resources: ExampleResources, id: BiomesId) {\n  const { position } = resources.get("/player/position", id);\n  // Perform a realistic jump.\n  resources.set("/player/position", id, {\n    position: [position[0], position[1] + JUMP_POWER, position[2]],\n  });\n}\n')),(0,a.kt)("h3",{id:"using-resources-within-react"},"Using resources within React"),(0,a.kt)("p",null,"If you want a resource update to trigger a react component to re-render, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"use()")," method on\n",(0,a.kt)("inlineCode",{parentName:"p"},"ReactResources"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"ReactResources")," can be accessed from within all game components, through the ",(0,a.kt)("inlineCode",{parentName:"p"},"ClientContext"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const PlayerHealth: React.FC<{ playerId: BiomesId }> = ({ playerId }) => {\n  const { reactResources, userId } = useClientContext();\n  // Updates to this player\'s "/player/health" will cause a re-render.\n  const { health, maxHealth } = reactResources.use("/player/health", playerId);\n\n  return (\n    <div>\n      <h1>{`${health}/${maxHealth}`}</h1>\n    </div>\n  );\n};\n')))}d.isMDXComponent=!0}}]);